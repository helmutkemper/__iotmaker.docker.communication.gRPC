// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0-devel
// 	protoc        v3.12.3
// source: containerCreate.proto

package iotmaker_docker_communication_grpc

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type TypeRestartPolicy int32

const (
	//Do not automatically restart the container. (the default)
	TypeRestartPolicy_KRestartPolicyNo TypeRestartPolicy = 0
	//Restart the container if it exits due to an error, which manifests as a non-zero exit
	//code.
	TypeRestartPolicy_KRestartPolicyOnFailure TypeRestartPolicy = 1
	//Always restart the container if it stops. If it is manually stopped, it is restarted
	//only when Docker daemon restarts or the container itself is manually restarted. (See the second bullet listed in restart policy details)
	TypeRestartPolicy_KRestartPolicyAlways TypeRestartPolicy = 2
	//Similar to always, except that when the container is stopped (manually or otherwise),
	//it is not restarted even after Docker daemon restarts.
	TypeRestartPolicy_KRestartPolicyUnlessStopped TypeRestartPolicy = 3
)

// Enum value maps for TypeRestartPolicy.
var (
	TypeRestartPolicy_name = map[int32]string{
		0: "KRestartPolicyNo",
		1: "KRestartPolicyOnFailure",
		2: "KRestartPolicyAlways",
		3: "KRestartPolicyUnlessStopped",
	}
	TypeRestartPolicy_value = map[string]int32{
		"KRestartPolicyNo":            0,
		"KRestartPolicyOnFailure":     1,
		"KRestartPolicyAlways":        2,
		"KRestartPolicyUnlessStopped": 3,
	}
)

func (x TypeRestartPolicy) Enum() *TypeRestartPolicy {
	p := new(TypeRestartPolicy)
	*p = x
	return p
}

func (x TypeRestartPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TypeRestartPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_containerCreate_proto_enumTypes[0].Descriptor()
}

func (TypeRestartPolicy) Type() protoreflect.EnumType {
	return &file_containerCreate_proto_enumTypes[0]
}

func (x TypeRestartPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TypeRestartPolicy.Descriptor instead.
func (TypeRestartPolicy) EnumDescriptor() ([]byte, []int) {
	return file_containerCreate_proto_rawDescGZIP(), []int{0}
}

type TypeVolumeMountType int32

const (
	// TypeBind is the type for mounting host dir (real folder inside computer where this code work)
	TypeVolumeMountType_KVolumeMountTypeBind TypeVolumeMountType = 0
	// TypeVolume is the type for remote storage volumes
	TypeVolumeMountType_KVolumeMountTypeVolume TypeVolumeMountType = 1
	// TypeTmpfs is the type for mounting tmpfs
	TypeVolumeMountType_KVolumeMountTypeTmpfs TypeVolumeMountType = 2
	// TypeNamedPipe is the type for mounting Windows named pipes
	TypeVolumeMountType_KVolumeMountTypeNpipe TypeVolumeMountType = 3
)

// Enum value maps for TypeVolumeMountType.
var (
	TypeVolumeMountType_name = map[int32]string{
		0: "KVolumeMountTypeBind",
		1: "KVolumeMountTypeVolume",
		2: "KVolumeMountTypeTmpfs",
		3: "KVolumeMountTypeNpipe",
	}
	TypeVolumeMountType_value = map[string]int32{
		"KVolumeMountTypeBind":   0,
		"KVolumeMountTypeVolume": 1,
		"KVolumeMountTypeTmpfs":  2,
		"KVolumeMountTypeNpipe":  3,
	}
)

func (x TypeVolumeMountType) Enum() *TypeVolumeMountType {
	p := new(TypeVolumeMountType)
	*p = x
	return p
}

func (x TypeVolumeMountType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TypeVolumeMountType) Descriptor() protoreflect.EnumDescriptor {
	return file_containerCreate_proto_enumTypes[1].Descriptor()
}

func (TypeVolumeMountType) Type() protoreflect.EnumType {
	return &file_containerCreate_proto_enumTypes[1]
}

func (x TypeVolumeMountType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TypeVolumeMountType.Descriptor instead.
func (TypeVolumeMountType) EnumDescriptor() ([]byte, []int) {
	return file_containerCreate_proto_rawDescGZIP(), []int{1}
}

type TypePortBinding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// HostIP is the host IP Address
	HostIP string `protobuf:"bytes,1,opt,name=HostIP,proto3" json:"HostIP,omitempty"`
	// HostPort is the host port number
	HostPort string `protobuf:"bytes,2,opt,name=HostPort,proto3" json:"HostPort,omitempty"`
}

func (x *TypePortBinding) Reset() {
	*x = TypePortBinding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_containerCreate_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypePortBinding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypePortBinding) ProtoMessage() {}

func (x *TypePortBinding) ProtoReflect() protoreflect.Message {
	mi := &file_containerCreate_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypePortBinding.ProtoReflect.Descriptor instead.
func (*TypePortBinding) Descriptor() ([]byte, []int) {
	return file_containerCreate_proto_rawDescGZIP(), []int{0}
}

func (x *TypePortBinding) GetHostIP() string {
	if x != nil {
		return x.HostIP
	}
	return ""
}

func (x *TypePortBinding) GetHostPort() string {
	if x != nil {
		return x.HostPort
	}
	return ""
}

type TypeMountMountVolume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   TypeVolumeMountType `protobuf:"varint,1,opt,name=type,proto3,enum=iotmakerDockerCommunicationGrpc.TypeVolumeMountType" json:"type,omitempty"`
	Source string              `protobuf:"bytes,2,opt,name=Source,proto3" json:"Source,omitempty"`
	Target string              `protobuf:"bytes,3,opt,name=Target,proto3" json:"Target,omitempty"`
}

func (x *TypeMountMountVolume) Reset() {
	*x = TypeMountMountVolume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_containerCreate_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeMountMountVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeMountMountVolume) ProtoMessage() {}

func (x *TypeMountMountVolume) ProtoReflect() protoreflect.Message {
	mi := &file_containerCreate_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeMountMountVolume.ProtoReflect.Descriptor instead.
func (*TypeMountMountVolume) Descriptor() ([]byte, []int) {
	return file_containerCreate_proto_rawDescGZIP(), []int{1}
}

func (x *TypeMountMountVolume) GetType() TypeVolumeMountType {
	if x != nil {
		return x.Type
	}
	return TypeVolumeMountType_KVolumeMountTypeBind
}

func (x *TypeMountMountVolume) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *TypeMountMountVolume) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

type TypeError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Trace   []string `protobuf:"bytes,3,rep,name=Trace,proto3" json:"Trace,omitempty"`
}

func (x *TypeError) Reset() {
	*x = TypeError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_containerCreate_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeError) ProtoMessage() {}

func (x *TypeError) ProtoReflect() protoreflect.Message {
	mi := &file_containerCreate_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeError.ProtoReflect.Descriptor instead.
func (*TypeError) Descriptor() ([]byte, []int) {
	return file_containerCreate_proto_rawDescGZIP(), []int{2}
}

func (x *TypeError) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *TypeError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TypeError) GetTrace() []string {
	if x != nil {
		return x.Trace
	}
	return nil
}

type TypePort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port  string `protobuf:"bytes,1,opt,name=Port,proto3" json:"Port,omitempty"`
	Proto string `protobuf:"bytes,2,opt,name=Proto,proto3" json:"Proto,omitempty"`
}

func (x *TypePort) Reset() {
	*x = TypePort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_containerCreate_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypePort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypePort) ProtoMessage() {}

func (x *TypePort) ProtoReflect() protoreflect.Message {
	mi := &file_containerCreate_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypePort.ProtoReflect.Descriptor instead.
func (*TypePort) Descriptor() ([]byte, []int) {
	return file_containerCreate_proto_rawDescGZIP(), []int{3}
}

func (x *TypePort) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *TypePort) GetProto() string {
	if x != nil {
		return x.Proto
	}
	return ""
}

type TypeNatPortMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port     *TypePort          `protobuf:"bytes,1,opt,name=Port,proto3" json:"Port,omitempty"`
	PortBind []*TypePortBinding `protobuf:"bytes,2,rep,name=PortBind,proto3" json:"PortBind,omitempty"`
}

func (x *TypeNatPortMap) Reset() {
	*x = TypeNatPortMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_containerCreate_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeNatPortMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeNatPortMap) ProtoMessage() {}

func (x *TypeNatPortMap) ProtoReflect() protoreflect.Message {
	mi := &file_containerCreate_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeNatPortMap.ProtoReflect.Descriptor instead.
func (*TypeNatPortMap) Descriptor() ([]byte, []int) {
	return file_containerCreate_proto_rawDescGZIP(), []int{4}
}

func (x *TypeNatPortMap) GetPort() *TypePort {
	if x != nil {
		return x.Port
	}
	return nil
}

func (x *TypeNatPortMap) GetPortBind() []*TypePortBinding {
	if x != nil {
		return x.PortBind
	}
	return nil
}

type ContainerCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageName          string                  `protobuf:"bytes,1,opt,name=imageName,proto3" json:"imageName,omitempty"`
	ContainerName      string                  `protobuf:"bytes,2,opt,name=containerName,proto3" json:"containerName,omitempty"`
	RestartPolicy      TypeRestartPolicy       `protobuf:"varint,3,opt,name=restartPolicy,proto3,enum=iotmakerDockerCommunicationGrpc.TypeRestartPolicy" json:"restartPolicy,omitempty"`
	PortExposedList    []*TypeNatPortMap       `protobuf:"bytes,4,rep,name=portExposedList,proto3" json:"portExposedList,omitempty"`
	MountVolumes       []*TypeMountMountVolume `protobuf:"bytes,5,rep,name=mountVolumes,proto3" json:"mountVolumes,omitempty"`
	ContainerNetworkId string                  `protobuf:"bytes,6,opt,name=containerNetworkId,proto3" json:"containerNetworkId,omitempty"`
}

func (x *ContainerCreateRequest) Reset() {
	*x = ContainerCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_containerCreate_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerCreateRequest) ProtoMessage() {}

func (x *ContainerCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_containerCreate_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerCreateRequest.ProtoReflect.Descriptor instead.
func (*ContainerCreateRequest) Descriptor() ([]byte, []int) {
	return file_containerCreate_proto_rawDescGZIP(), []int{5}
}

func (x *ContainerCreateRequest) GetImageName() string {
	if x != nil {
		return x.ImageName
	}
	return ""
}

func (x *ContainerCreateRequest) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

func (x *ContainerCreateRequest) GetRestartPolicy() TypeRestartPolicy {
	if x != nil {
		return x.RestartPolicy
	}
	return TypeRestartPolicy_KRestartPolicyNo
}

func (x *ContainerCreateRequest) GetPortExposedList() []*TypeNatPortMap {
	if x != nil {
		return x.PortExposedList
	}
	return nil
}

func (x *ContainerCreateRequest) GetMountVolumes() []*TypeMountMountVolume {
	if x != nil {
		return x.MountVolumes
	}
	return nil
}

func (x *ContainerCreateRequest) GetContainerNetworkId() string {
	if x != nil {
		return x.ContainerNetworkId
	}
	return ""
}

type ContainerCreateAndChangeExposedPortRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageName          string                  `protobuf:"bytes,1,opt,name=imageName,proto3" json:"imageName,omitempty"`
	ContainerName      string                  `protobuf:"bytes,2,opt,name=containerName,proto3" json:"containerName,omitempty"`
	RestartPolicy      TypeRestartPolicy       `protobuf:"varint,3,opt,name=restartPolicy,proto3,enum=iotmakerDockerCommunicationGrpc.TypeRestartPolicy" json:"restartPolicy,omitempty"`
	MountVolumes       []*TypeMountMountVolume `protobuf:"bytes,4,rep,name=mountVolumes,proto3" json:"mountVolumes,omitempty"`
	ContainerNetworkId string                  `protobuf:"bytes,5,opt,name=containerNetworkId,proto3" json:"containerNetworkId,omitempty"`
	CurrentPort        []*TypePort             `protobuf:"bytes,6,rep,name=currentPort,proto3" json:"currentPort,omitempty"`
	ChangeToPort       []*TypePort             `protobuf:"bytes,7,rep,name=changeToPort,proto3" json:"changeToPort,omitempty"`
}

func (x *ContainerCreateAndChangeExposedPortRequest) Reset() {
	*x = ContainerCreateAndChangeExposedPortRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_containerCreate_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerCreateAndChangeExposedPortRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerCreateAndChangeExposedPortRequest) ProtoMessage() {}

func (x *ContainerCreateAndChangeExposedPortRequest) ProtoReflect() protoreflect.Message {
	mi := &file_containerCreate_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerCreateAndChangeExposedPortRequest.ProtoReflect.Descriptor instead.
func (*ContainerCreateAndChangeExposedPortRequest) Descriptor() ([]byte, []int) {
	return file_containerCreate_proto_rawDescGZIP(), []int{6}
}

func (x *ContainerCreateAndChangeExposedPortRequest) GetImageName() string {
	if x != nil {
		return x.ImageName
	}
	return ""
}

func (x *ContainerCreateAndChangeExposedPortRequest) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

func (x *ContainerCreateAndChangeExposedPortRequest) GetRestartPolicy() TypeRestartPolicy {
	if x != nil {
		return x.RestartPolicy
	}
	return TypeRestartPolicy_KRestartPolicyNo
}

func (x *ContainerCreateAndChangeExposedPortRequest) GetMountVolumes() []*TypeMountMountVolume {
	if x != nil {
		return x.MountVolumes
	}
	return nil
}

func (x *ContainerCreateAndChangeExposedPortRequest) GetContainerNetworkId() string {
	if x != nil {
		return x.ContainerNetworkId
	}
	return ""
}

func (x *ContainerCreateAndChangeExposedPortRequest) GetCurrentPort() []*TypePort {
	if x != nil {
		return x.CurrentPort
	}
	return nil
}

func (x *ContainerCreateAndChangeExposedPortRequest) GetChangeToPort() []*TypePort {
	if x != nil {
		return x.ChangeToPort
	}
	return nil
}

type ContainerCreateAndExposePortsAutomaticallyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageName          string                  `protobuf:"bytes,1,opt,name=imageName,proto3" json:"imageName,omitempty"`
	ContainerName      string                  `protobuf:"bytes,2,opt,name=containerName,proto3" json:"containerName,omitempty"`
	RestartPolicy      TypeRestartPolicy       `protobuf:"varint,3,opt,name=restartPolicy,proto3,enum=iotmakerDockerCommunicationGrpc.TypeRestartPolicy" json:"restartPolicy,omitempty"`
	MountVolumes       []*TypeMountMountVolume `protobuf:"bytes,4,rep,name=mountVolumes,proto3" json:"mountVolumes,omitempty"`
	ContainerNetworkId string                  `protobuf:"bytes,5,opt,name=containerNetworkId,proto3" json:"containerNetworkId,omitempty"`
}

func (x *ContainerCreateAndExposePortsAutomaticallyRequest) Reset() {
	*x = ContainerCreateAndExposePortsAutomaticallyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_containerCreate_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerCreateAndExposePortsAutomaticallyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerCreateAndExposePortsAutomaticallyRequest) ProtoMessage() {}

func (x *ContainerCreateAndExposePortsAutomaticallyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_containerCreate_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerCreateAndExposePortsAutomaticallyRequest.ProtoReflect.Descriptor instead.
func (*ContainerCreateAndExposePortsAutomaticallyRequest) Descriptor() ([]byte, []int) {
	return file_containerCreate_proto_rawDescGZIP(), []int{7}
}

func (x *ContainerCreateAndExposePortsAutomaticallyRequest) GetImageName() string {
	if x != nil {
		return x.ImageName
	}
	return ""
}

func (x *ContainerCreateAndExposePortsAutomaticallyRequest) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

func (x *ContainerCreateAndExposePortsAutomaticallyRequest) GetRestartPolicy() TypeRestartPolicy {
	if x != nil {
		return x.RestartPolicy
	}
	return TypeRestartPolicy_KRestartPolicyNo
}

func (x *ContainerCreateAndExposePortsAutomaticallyRequest) GetMountVolumes() []*TypeMountMountVolume {
	if x != nil {
		return x.MountVolumes
	}
	return nil
}

func (x *ContainerCreateAndExposePortsAutomaticallyRequest) GetContainerNetworkId() string {
	if x != nil {
		return x.ContainerNetworkId
	}
	return ""
}

type ContainerCreateWithoutExposePortsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageName          string                  `protobuf:"bytes,1,opt,name=imageName,proto3" json:"imageName,omitempty"`
	ContainerName      string                  `protobuf:"bytes,2,opt,name=containerName,proto3" json:"containerName,omitempty"`
	RestartPolicy      TypeRestartPolicy       `protobuf:"varint,3,opt,name=restartPolicy,proto3,enum=iotmakerDockerCommunicationGrpc.TypeRestartPolicy" json:"restartPolicy,omitempty"`
	MountVolumes       []*TypeMountMountVolume `protobuf:"bytes,4,rep,name=mountVolumes,proto3" json:"mountVolumes,omitempty"`
	ContainerNetworkId string                  `protobuf:"bytes,5,opt,name=containerNetworkId,proto3" json:"containerNetworkId,omitempty"`
}

func (x *ContainerCreateWithoutExposePortsRequest) Reset() {
	*x = ContainerCreateWithoutExposePortsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_containerCreate_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerCreateWithoutExposePortsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerCreateWithoutExposePortsRequest) ProtoMessage() {}

func (x *ContainerCreateWithoutExposePortsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_containerCreate_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerCreateWithoutExposePortsRequest.ProtoReflect.Descriptor instead.
func (*ContainerCreateWithoutExposePortsRequest) Descriptor() ([]byte, []int) {
	return file_containerCreate_proto_rawDescGZIP(), []int{8}
}

func (x *ContainerCreateWithoutExposePortsRequest) GetImageName() string {
	if x != nil {
		return x.ImageName
	}
	return ""
}

func (x *ContainerCreateWithoutExposePortsRequest) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

func (x *ContainerCreateWithoutExposePortsRequest) GetRestartPolicy() TypeRestartPolicy {
	if x != nil {
		return x.RestartPolicy
	}
	return TypeRestartPolicy_KRestartPolicyNo
}

func (x *ContainerCreateWithoutExposePortsRequest) GetMountVolumes() []*TypeMountMountVolume {
	if x != nil {
		return x.MountVolumes
	}
	return nil
}

func (x *ContainerCreateWithoutExposePortsRequest) GetContainerNetworkId() string {
	if x != nil {
		return x.ContainerNetworkId
	}
	return ""
}

type ContainerCreateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error       *TypeError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
	ContainerID string     `protobuf:"bytes,2,opt,name=ContainerID,proto3" json:"ContainerID,omitempty"`
}

func (x *ContainerCreateReply) Reset() {
	*x = ContainerCreateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_containerCreate_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerCreateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerCreateReply) ProtoMessage() {}

func (x *ContainerCreateReply) ProtoReflect() protoreflect.Message {
	mi := &file_containerCreate_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerCreateReply.ProtoReflect.Descriptor instead.
func (*ContainerCreateReply) Descriptor() ([]byte, []int) {
	return file_containerCreate_proto_rawDescGZIP(), []int{9}
}

func (x *ContainerCreateReply) GetError() *TypeError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ContainerCreateReply) GetContainerID() string {
	if x != nil {
		return x.ContainerID
	}
	return ""
}

type RequestByNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *RequestByNameRequest) Reset() {
	*x = RequestByNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_containerCreate_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestByNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestByNameRequest) ProtoMessage() {}

func (x *RequestByNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_containerCreate_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestByNameRequest.ProtoReflect.Descriptor instead.
func (*RequestByNameRequest) Descriptor() ([]byte, []int) {
	return file_containerCreate_proto_rawDescGZIP(), []int{10}
}

func (x *RequestByNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type RequestByNameReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *TypeError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
	Id    string     `protobuf:"bytes,2,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (x *RequestByNameReply) Reset() {
	*x = RequestByNameReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_containerCreate_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestByNameReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestByNameReply) ProtoMessage() {}

func (x *RequestByNameReply) ProtoReflect() protoreflect.Message {
	mi := &file_containerCreate_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestByNameReply.ProtoReflect.Descriptor instead.
func (*RequestByNameReply) Descriptor() ([]byte, []int) {
	return file_containerCreate_proto_rawDescGZIP(), []int{11}
}

func (x *RequestByNameReply) GetError() *TypeError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *RequestByNameReply) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

var File_containerCreate_proto protoreflect.FileDescriptor

var file_containerCreate_proto_rawDesc = []byte{
	0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1f, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65,
	0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x22, 0x45, 0x0a, 0x0f, 0x74, 0x79, 0x70, 0x65,
	0x50, 0x6f, 0x72, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x48,
	0x6f, 0x73, 0x74, 0x49, 0x50, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x48, 0x6f, 0x73,
	0x74, 0x49, 0x50, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x22,
	0x90, 0x01, 0x0a, 0x14, 0x74, 0x79, 0x70, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x6f, 0x75,
	0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65,
	0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x22, 0x55, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x05, 0x54, 0x72, 0x61, 0x63, 0x65, 0x22, 0x34, 0x0a, 0x08, 0x74, 0x79, 0x70,
	0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x9d, 0x01, 0x0a, 0x0e, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x4d,
	0x61, 0x70, 0x12, 0x3d, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65,
	0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72,
	0x70, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x4c, 0x0a, 0x08, 0x50, 0x6f, 0x72, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f,
	0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x42, 0x69,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x50, 0x6f, 0x72, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x22,
	0x9c, 0x03, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x58,
	0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72,
	0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x59, 0x0a, 0x0f, 0x70, 0x6f, 0x72, 0x74,
	0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b,
	0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x72, 0x70, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x4d,
	0x61, 0x70, 0x52, 0x0f, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x59, 0x0a, 0x0c, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x69, 0x6f, 0x74, 0x6d,
	0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x52, 0x0c, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x12, 0x2e,
	0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x22, 0xf1,
	0x03, 0x0a, 0x2a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x73,
	0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x58, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61,
	0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0d, 0x72, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x59, 0x0a, 0x0c, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b,
	0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x72, 0x70, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x6f, 0x75,
	0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x0c, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6f,
	0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x4d, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x6f, 0x50,
	0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6f, 0x74, 0x6d,
	0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x50, 0x6f, 0x72, 0x74, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x6f, 0x50, 0x6f,
	0x72, 0x74, 0x22, 0xdc, 0x02, 0x0a, 0x31, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x50,
	0x6f, 0x72, 0x74, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x58, 0x0a, 0x0d,
	0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f,
	0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x59, 0x0a, 0x0c, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x69,
	0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x52, 0x0c, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x73, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49,
	0x64, 0x22, 0xd3, 0x02, 0x0a, 0x28, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x45, 0x78, 0x70, 0x6f,
	0x73, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x58, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x69, 0x6f, 0x74, 0x6d,
	0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0d, 0x72,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x59, 0x0a, 0x0c,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63,
	0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x47, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x6f,
	0x75, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x0c, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x22, 0x7a, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x40, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x49, 0x44, 0x22, 0x2a, 0x0a, 0x14, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x66, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x40, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44,
	0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x2a, 0x81, 0x01, 0x0a, 0x11, 0x74, 0x79, 0x70, 0x65,
	0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x14, 0x0a,
	0x10, 0x4b, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e,
	0x6f, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x4b, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x10, 0x01,
	0x12, 0x18, 0x0a, 0x14, 0x4b, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x41, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x4b, 0x52,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x55, 0x6e, 0x6c, 0x65,
	0x73, 0x73, 0x53, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x10, 0x03, 0x2a, 0x81, 0x01, 0x0a, 0x13,
	0x74, 0x79, 0x70, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x4b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x6f,
	0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x10, 0x00, 0x12, 0x1a, 0x0a,
	0x16, 0x4b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x4b, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x54, 0x6d, 0x70,
	0x66, 0x73, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x4b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x70, 0x69, 0x70, 0x65, 0x10, 0x03, 0x32,
	0xee, 0x0c, 0x0a, 0x06, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x83, 0x01, 0x0a, 0x0f, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x37,
	0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b,
	0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x8b, 0x01, 0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x37, 0x2e, 0x69,
	0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72,
	0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0xab,
	0x01, 0x0a, 0x23, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x73,
	0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x4b, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65,
	0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f,
	0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0xb0, 0x01, 0x0a,
	0x28, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x50, 0x6f, 0x72,
	0x74, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x4b, 0x2e, 0x69, 0x6f, 0x74, 0x6d,
	0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65,
	0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0xb9, 0x01, 0x0a, 0x2a, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x50, 0x6f, 0x72, 0x74,
	0x73, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x12, 0x52,
	0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x6e, 0x64, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x41, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x35, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63,
	0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x47, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0xbe, 0x01, 0x0a, 0x2f,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45,
	0x78, 0x70, 0x6f, 0x73, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x52, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70,
	0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x6e, 0x64, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x41,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f,
	0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0xa7, 0x01, 0x0a,
	0x21, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x50, 0x6f, 0x72,
	0x74, 0x73, 0x12, 0x49, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63,
	0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x47, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x73,
	0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e,
	0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0xaf, 0x01, 0x0a, 0x29, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75,
	0x74, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x41, 0x6e, 0x64, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x49, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44,
	0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x45, 0x78, 0x70,
	0x6f, 0x73, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x35, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70,
	0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x85, 0x01, 0x0a, 0x15, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x46, 0x69, 0x6e, 0x64, 0x49, 0x64, 0x42, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x35, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63,
	0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x47, 0x72, 0x70, 0x63, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x69, 0x6f, 0x74, 0x6d,
	0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x8d, 0x01, 0x0a, 0x1d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x46, 0x69,
	0x6e, 0x64, 0x49, 0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x73, 0x12, 0x35, 0x2e, 0x69, 0x6f, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63,
	0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x47, 0x72, 0x70, 0x63, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x69, 0x6f, 0x74, 0x6d,
	0x61, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x42, 0x3c, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68,
	0x65, 0x6c, 0x6d, 0x75, 0x74, 0x6b, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x2f, 0x69, 0x6f, 0x74, 0x6d,
	0x61, 0x6b, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_containerCreate_proto_rawDescOnce sync.Once
	file_containerCreate_proto_rawDescData = file_containerCreate_proto_rawDesc
)

func file_containerCreate_proto_rawDescGZIP() []byte {
	file_containerCreate_proto_rawDescOnce.Do(func() {
		file_containerCreate_proto_rawDescData = protoimpl.X.CompressGZIP(file_containerCreate_proto_rawDescData)
	})
	return file_containerCreate_proto_rawDescData
}

var file_containerCreate_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_containerCreate_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_containerCreate_proto_goTypes = []interface{}{
	(TypeRestartPolicy)(0),                                    // 0: iotmakerDockerCommunicationGrpc.typeRestartPolicy
	(TypeVolumeMountType)(0),                                  // 1: iotmakerDockerCommunicationGrpc.typeVolumeMountType
	(*TypePortBinding)(nil),                                   // 2: iotmakerDockerCommunicationGrpc.typePortBinding
	(*TypeMountMountVolume)(nil),                              // 3: iotmakerDockerCommunicationGrpc.typeMountMountVolume
	(*TypeError)(nil),                                         // 4: iotmakerDockerCommunicationGrpc.typeError
	(*TypePort)(nil),                                          // 5: iotmakerDockerCommunicationGrpc.typePort
	(*TypeNatPortMap)(nil),                                    // 6: iotmakerDockerCommunicationGrpc.typeNatPortMap
	(*ContainerCreateRequest)(nil),                            // 7: iotmakerDockerCommunicationGrpc.containerCreateRequest
	(*ContainerCreateAndChangeExposedPortRequest)(nil),        // 8: iotmakerDockerCommunicationGrpc.containerCreateAndChangeExposedPortRequest
	(*ContainerCreateAndExposePortsAutomaticallyRequest)(nil), // 9: iotmakerDockerCommunicationGrpc.containerCreateAndExposePortsAutomaticallyRequest
	(*ContainerCreateWithoutExposePortsRequest)(nil),          // 10: iotmakerDockerCommunicationGrpc.containerCreateWithoutExposePortsRequest
	(*ContainerCreateReply)(nil),                              // 11: iotmakerDockerCommunicationGrpc.containerCreateReply
	(*RequestByNameRequest)(nil),                              // 12: iotmakerDockerCommunicationGrpc.requestByNameRequest
	(*RequestByNameReply)(nil),                                // 13: iotmakerDockerCommunicationGrpc.requestByNameReply
}
var file_containerCreate_proto_depIdxs = []int32{
	1,  // 0: iotmakerDockerCommunicationGrpc.typeMountMountVolume.type:type_name -> iotmakerDockerCommunicationGrpc.typeVolumeMountType
	5,  // 1: iotmakerDockerCommunicationGrpc.typeNatPortMap.Port:type_name -> iotmakerDockerCommunicationGrpc.typePort
	2,  // 2: iotmakerDockerCommunicationGrpc.typeNatPortMap.PortBind:type_name -> iotmakerDockerCommunicationGrpc.typePortBinding
	0,  // 3: iotmakerDockerCommunicationGrpc.containerCreateRequest.restartPolicy:type_name -> iotmakerDockerCommunicationGrpc.typeRestartPolicy
	6,  // 4: iotmakerDockerCommunicationGrpc.containerCreateRequest.portExposedList:type_name -> iotmakerDockerCommunicationGrpc.typeNatPortMap
	3,  // 5: iotmakerDockerCommunicationGrpc.containerCreateRequest.mountVolumes:type_name -> iotmakerDockerCommunicationGrpc.typeMountMountVolume
	0,  // 6: iotmakerDockerCommunicationGrpc.containerCreateAndChangeExposedPortRequest.restartPolicy:type_name -> iotmakerDockerCommunicationGrpc.typeRestartPolicy
	3,  // 7: iotmakerDockerCommunicationGrpc.containerCreateAndChangeExposedPortRequest.mountVolumes:type_name -> iotmakerDockerCommunicationGrpc.typeMountMountVolume
	5,  // 8: iotmakerDockerCommunicationGrpc.containerCreateAndChangeExposedPortRequest.currentPort:type_name -> iotmakerDockerCommunicationGrpc.typePort
	5,  // 9: iotmakerDockerCommunicationGrpc.containerCreateAndChangeExposedPortRequest.changeToPort:type_name -> iotmakerDockerCommunicationGrpc.typePort
	0,  // 10: iotmakerDockerCommunicationGrpc.containerCreateAndExposePortsAutomaticallyRequest.restartPolicy:type_name -> iotmakerDockerCommunicationGrpc.typeRestartPolicy
	3,  // 11: iotmakerDockerCommunicationGrpc.containerCreateAndExposePortsAutomaticallyRequest.mountVolumes:type_name -> iotmakerDockerCommunicationGrpc.typeMountMountVolume
	0,  // 12: iotmakerDockerCommunicationGrpc.containerCreateWithoutExposePortsRequest.restartPolicy:type_name -> iotmakerDockerCommunicationGrpc.typeRestartPolicy
	3,  // 13: iotmakerDockerCommunicationGrpc.containerCreateWithoutExposePortsRequest.mountVolumes:type_name -> iotmakerDockerCommunicationGrpc.typeMountMountVolume
	4,  // 14: iotmakerDockerCommunicationGrpc.containerCreateReply.Error:type_name -> iotmakerDockerCommunicationGrpc.typeError
	4,  // 15: iotmakerDockerCommunicationGrpc.requestByNameReply.Error:type_name -> iotmakerDockerCommunicationGrpc.typeError
	7,  // 16: iotmakerDockerCommunicationGrpc.Docker.ContainerCreate:input_type -> iotmakerDockerCommunicationGrpc.containerCreateRequest
	7,  // 17: iotmakerDockerCommunicationGrpc.Docker.ContainerCreateAndStart:input_type -> iotmakerDockerCommunicationGrpc.containerCreateRequest
	8,  // 18: iotmakerDockerCommunicationGrpc.Docker.ContainerCreateAndChangeExposedPort:input_type -> iotmakerDockerCommunicationGrpc.containerCreateAndChangeExposedPortRequest
	8,  // 19: iotmakerDockerCommunicationGrpc.Docker.ContainerCreateChangeExposedPortAndStart:input_type -> iotmakerDockerCommunicationGrpc.containerCreateAndChangeExposedPortRequest
	9,  // 20: iotmakerDockerCommunicationGrpc.Docker.ContainerCreateAndExposePortsAutomatically:input_type -> iotmakerDockerCommunicationGrpc.containerCreateAndExposePortsAutomaticallyRequest
	9,  // 21: iotmakerDockerCommunicationGrpc.Docker.ContainerCreateExposePortsAutomaticallyAndStart:input_type -> iotmakerDockerCommunicationGrpc.containerCreateAndExposePortsAutomaticallyRequest
	10, // 22: iotmakerDockerCommunicationGrpc.Docker.ContainerCreateWithoutExposePorts:input_type -> iotmakerDockerCommunicationGrpc.containerCreateWithoutExposePortsRequest
	10, // 23: iotmakerDockerCommunicationGrpc.Docker.ContainerCreateWithoutExposePortsAndStart:input_type -> iotmakerDockerCommunicationGrpc.containerCreateWithoutExposePortsRequest
	12, // 24: iotmakerDockerCommunicationGrpc.Docker.ContainerFindIdByName:input_type -> iotmakerDockerCommunicationGrpc.requestByNameRequest
	12, // 25: iotmakerDockerCommunicationGrpc.Docker.ContainerFindIdByNameContains:input_type -> iotmakerDockerCommunicationGrpc.requestByNameRequest
	11, // 26: iotmakerDockerCommunicationGrpc.Docker.ContainerCreate:output_type -> iotmakerDockerCommunicationGrpc.containerCreateReply
	11, // 27: iotmakerDockerCommunicationGrpc.Docker.ContainerCreateAndStart:output_type -> iotmakerDockerCommunicationGrpc.containerCreateReply
	11, // 28: iotmakerDockerCommunicationGrpc.Docker.ContainerCreateAndChangeExposedPort:output_type -> iotmakerDockerCommunicationGrpc.containerCreateReply
	11, // 29: iotmakerDockerCommunicationGrpc.Docker.ContainerCreateChangeExposedPortAndStart:output_type -> iotmakerDockerCommunicationGrpc.containerCreateReply
	11, // 30: iotmakerDockerCommunicationGrpc.Docker.ContainerCreateAndExposePortsAutomatically:output_type -> iotmakerDockerCommunicationGrpc.containerCreateReply
	11, // 31: iotmakerDockerCommunicationGrpc.Docker.ContainerCreateExposePortsAutomaticallyAndStart:output_type -> iotmakerDockerCommunicationGrpc.containerCreateReply
	11, // 32: iotmakerDockerCommunicationGrpc.Docker.ContainerCreateWithoutExposePorts:output_type -> iotmakerDockerCommunicationGrpc.containerCreateReply
	11, // 33: iotmakerDockerCommunicationGrpc.Docker.ContainerCreateWithoutExposePortsAndStart:output_type -> iotmakerDockerCommunicationGrpc.containerCreateReply
	13, // 34: iotmakerDockerCommunicationGrpc.Docker.ContainerFindIdByName:output_type -> iotmakerDockerCommunicationGrpc.requestByNameReply
	13, // 35: iotmakerDockerCommunicationGrpc.Docker.ContainerFindIdByNameContains:output_type -> iotmakerDockerCommunicationGrpc.requestByNameReply
	26, // [26:36] is the sub-list for method output_type
	16, // [16:26] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_containerCreate_proto_init() }
func file_containerCreate_proto_init() {
	if File_containerCreate_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_containerCreate_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypePortBinding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_containerCreate_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeMountMountVolume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_containerCreate_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_containerCreate_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypePort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_containerCreate_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeNatPortMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_containerCreate_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_containerCreate_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerCreateAndChangeExposedPortRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_containerCreate_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerCreateAndExposePortsAutomaticallyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_containerCreate_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerCreateWithoutExposePortsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_containerCreate_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerCreateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_containerCreate_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestByNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_containerCreate_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestByNameReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_containerCreate_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_containerCreate_proto_goTypes,
		DependencyIndexes: file_containerCreate_proto_depIdxs,
		EnumInfos:         file_containerCreate_proto_enumTypes,
		MessageInfos:      file_containerCreate_proto_msgTypes,
	}.Build()
	File_containerCreate_proto = out.File
	file_containerCreate_proto_rawDesc = nil
	file_containerCreate_proto_goTypes = nil
	file_containerCreate_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DockerClient is the client API for Docker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DockerClient interface {
	ContainerCreate(ctx context.Context, in *ContainerCreateRequest, opts ...grpc.CallOption) (*ContainerCreateReply, error)
	ContainerCreateAndStart(ctx context.Context, in *ContainerCreateRequest, opts ...grpc.CallOption) (*ContainerCreateReply, error)
	ContainerCreateAndChangeExposedPort(ctx context.Context, in *ContainerCreateAndChangeExposedPortRequest, opts ...grpc.CallOption) (*ContainerCreateReply, error)
	ContainerCreateChangeExposedPortAndStart(ctx context.Context, in *ContainerCreateAndChangeExposedPortRequest, opts ...grpc.CallOption) (*ContainerCreateReply, error)
	ContainerCreateAndExposePortsAutomatically(ctx context.Context, in *ContainerCreateAndExposePortsAutomaticallyRequest, opts ...grpc.CallOption) (*ContainerCreateReply, error)
	ContainerCreateExposePortsAutomaticallyAndStart(ctx context.Context, in *ContainerCreateAndExposePortsAutomaticallyRequest, opts ...grpc.CallOption) (*ContainerCreateReply, error)
	ContainerCreateWithoutExposePorts(ctx context.Context, in *ContainerCreateWithoutExposePortsRequest, opts ...grpc.CallOption) (*ContainerCreateReply, error)
	ContainerCreateWithoutExposePortsAndStart(ctx context.Context, in *ContainerCreateWithoutExposePortsRequest, opts ...grpc.CallOption) (*ContainerCreateReply, error)
	ContainerFindIdByName(ctx context.Context, in *RequestByNameRequest, opts ...grpc.CallOption) (*RequestByNameReply, error)
	ContainerFindIdByNameContains(ctx context.Context, in *RequestByNameRequest, opts ...grpc.CallOption) (*RequestByNameReply, error)
}

type dockerClient struct {
	cc grpc.ClientConnInterface
}

func NewDockerClient(cc grpc.ClientConnInterface) DockerClient {
	return &dockerClient{cc}
}

func (c *dockerClient) ContainerCreate(ctx context.Context, in *ContainerCreateRequest, opts ...grpc.CallOption) (*ContainerCreateReply, error) {
	out := new(ContainerCreateReply)
	err := c.cc.Invoke(ctx, "/iotmakerDockerCommunicationGrpc.Docker/ContainerCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerClient) ContainerCreateAndStart(ctx context.Context, in *ContainerCreateRequest, opts ...grpc.CallOption) (*ContainerCreateReply, error) {
	out := new(ContainerCreateReply)
	err := c.cc.Invoke(ctx, "/iotmakerDockerCommunicationGrpc.Docker/ContainerCreateAndStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerClient) ContainerCreateAndChangeExposedPort(ctx context.Context, in *ContainerCreateAndChangeExposedPortRequest, opts ...grpc.CallOption) (*ContainerCreateReply, error) {
	out := new(ContainerCreateReply)
	err := c.cc.Invoke(ctx, "/iotmakerDockerCommunicationGrpc.Docker/ContainerCreateAndChangeExposedPort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerClient) ContainerCreateChangeExposedPortAndStart(ctx context.Context, in *ContainerCreateAndChangeExposedPortRequest, opts ...grpc.CallOption) (*ContainerCreateReply, error) {
	out := new(ContainerCreateReply)
	err := c.cc.Invoke(ctx, "/iotmakerDockerCommunicationGrpc.Docker/ContainerCreateChangeExposedPortAndStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerClient) ContainerCreateAndExposePortsAutomatically(ctx context.Context, in *ContainerCreateAndExposePortsAutomaticallyRequest, opts ...grpc.CallOption) (*ContainerCreateReply, error) {
	out := new(ContainerCreateReply)
	err := c.cc.Invoke(ctx, "/iotmakerDockerCommunicationGrpc.Docker/ContainerCreateAndExposePortsAutomatically", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerClient) ContainerCreateExposePortsAutomaticallyAndStart(ctx context.Context, in *ContainerCreateAndExposePortsAutomaticallyRequest, opts ...grpc.CallOption) (*ContainerCreateReply, error) {
	out := new(ContainerCreateReply)
	err := c.cc.Invoke(ctx, "/iotmakerDockerCommunicationGrpc.Docker/ContainerCreateExposePortsAutomaticallyAndStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerClient) ContainerCreateWithoutExposePorts(ctx context.Context, in *ContainerCreateWithoutExposePortsRequest, opts ...grpc.CallOption) (*ContainerCreateReply, error) {
	out := new(ContainerCreateReply)
	err := c.cc.Invoke(ctx, "/iotmakerDockerCommunicationGrpc.Docker/ContainerCreateWithoutExposePorts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerClient) ContainerCreateWithoutExposePortsAndStart(ctx context.Context, in *ContainerCreateWithoutExposePortsRequest, opts ...grpc.CallOption) (*ContainerCreateReply, error) {
	out := new(ContainerCreateReply)
	err := c.cc.Invoke(ctx, "/iotmakerDockerCommunicationGrpc.Docker/ContainerCreateWithoutExposePortsAndStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerClient) ContainerFindIdByName(ctx context.Context, in *RequestByNameRequest, opts ...grpc.CallOption) (*RequestByNameReply, error) {
	out := new(RequestByNameReply)
	err := c.cc.Invoke(ctx, "/iotmakerDockerCommunicationGrpc.Docker/ContainerFindIdByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerClient) ContainerFindIdByNameContains(ctx context.Context, in *RequestByNameRequest, opts ...grpc.CallOption) (*RequestByNameReply, error) {
	out := new(RequestByNameReply)
	err := c.cc.Invoke(ctx, "/iotmakerDockerCommunicationGrpc.Docker/ContainerFindIdByNameContains", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DockerServer is the server API for Docker service.
type DockerServer interface {
	ContainerCreate(context.Context, *ContainerCreateRequest) (*ContainerCreateReply, error)
	ContainerCreateAndStart(context.Context, *ContainerCreateRequest) (*ContainerCreateReply, error)
	ContainerCreateAndChangeExposedPort(context.Context, *ContainerCreateAndChangeExposedPortRequest) (*ContainerCreateReply, error)
	ContainerCreateChangeExposedPortAndStart(context.Context, *ContainerCreateAndChangeExposedPortRequest) (*ContainerCreateReply, error)
	ContainerCreateAndExposePortsAutomatically(context.Context, *ContainerCreateAndExposePortsAutomaticallyRequest) (*ContainerCreateReply, error)
	ContainerCreateExposePortsAutomaticallyAndStart(context.Context, *ContainerCreateAndExposePortsAutomaticallyRequest) (*ContainerCreateReply, error)
	ContainerCreateWithoutExposePorts(context.Context, *ContainerCreateWithoutExposePortsRequest) (*ContainerCreateReply, error)
	ContainerCreateWithoutExposePortsAndStart(context.Context, *ContainerCreateWithoutExposePortsRequest) (*ContainerCreateReply, error)
	ContainerFindIdByName(context.Context, *RequestByNameRequest) (*RequestByNameReply, error)
	ContainerFindIdByNameContains(context.Context, *RequestByNameRequest) (*RequestByNameReply, error)
}

// UnimplementedDockerServer can be embedded to have forward compatible implementations.
type UnimplementedDockerServer struct {
}

func (*UnimplementedDockerServer) ContainerCreate(context.Context, *ContainerCreateRequest) (*ContainerCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContainerCreate not implemented")
}
func (*UnimplementedDockerServer) ContainerCreateAndStart(context.Context, *ContainerCreateRequest) (*ContainerCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContainerCreateAndStart not implemented")
}
func (*UnimplementedDockerServer) ContainerCreateAndChangeExposedPort(context.Context, *ContainerCreateAndChangeExposedPortRequest) (*ContainerCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContainerCreateAndChangeExposedPort not implemented")
}
func (*UnimplementedDockerServer) ContainerCreateChangeExposedPortAndStart(context.Context, *ContainerCreateAndChangeExposedPortRequest) (*ContainerCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContainerCreateChangeExposedPortAndStart not implemented")
}
func (*UnimplementedDockerServer) ContainerCreateAndExposePortsAutomatically(context.Context, *ContainerCreateAndExposePortsAutomaticallyRequest) (*ContainerCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContainerCreateAndExposePortsAutomatically not implemented")
}
func (*UnimplementedDockerServer) ContainerCreateExposePortsAutomaticallyAndStart(context.Context, *ContainerCreateAndExposePortsAutomaticallyRequest) (*ContainerCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContainerCreateExposePortsAutomaticallyAndStart not implemented")
}
func (*UnimplementedDockerServer) ContainerCreateWithoutExposePorts(context.Context, *ContainerCreateWithoutExposePortsRequest) (*ContainerCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContainerCreateWithoutExposePorts not implemented")
}
func (*UnimplementedDockerServer) ContainerCreateWithoutExposePortsAndStart(context.Context, *ContainerCreateWithoutExposePortsRequest) (*ContainerCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContainerCreateWithoutExposePortsAndStart not implemented")
}
func (*UnimplementedDockerServer) ContainerFindIdByName(context.Context, *RequestByNameRequest) (*RequestByNameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContainerFindIdByName not implemented")
}
func (*UnimplementedDockerServer) ContainerFindIdByNameContains(context.Context, *RequestByNameRequest) (*RequestByNameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContainerFindIdByNameContains not implemented")
}

func RegisterDockerServer(s *grpc.Server, srv DockerServer) {
	s.RegisterService(&_Docker_serviceDesc, srv)
}

func _Docker_ContainerCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerServer).ContainerCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotmakerDockerCommunicationGrpc.Docker/ContainerCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerServer).ContainerCreate(ctx, req.(*ContainerCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Docker_ContainerCreateAndStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerServer).ContainerCreateAndStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotmakerDockerCommunicationGrpc.Docker/ContainerCreateAndStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerServer).ContainerCreateAndStart(ctx, req.(*ContainerCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Docker_ContainerCreateAndChangeExposedPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerCreateAndChangeExposedPortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerServer).ContainerCreateAndChangeExposedPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotmakerDockerCommunicationGrpc.Docker/ContainerCreateAndChangeExposedPort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerServer).ContainerCreateAndChangeExposedPort(ctx, req.(*ContainerCreateAndChangeExposedPortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Docker_ContainerCreateChangeExposedPortAndStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerCreateAndChangeExposedPortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerServer).ContainerCreateChangeExposedPortAndStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotmakerDockerCommunicationGrpc.Docker/ContainerCreateChangeExposedPortAndStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerServer).ContainerCreateChangeExposedPortAndStart(ctx, req.(*ContainerCreateAndChangeExposedPortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Docker_ContainerCreateAndExposePortsAutomatically_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerCreateAndExposePortsAutomaticallyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerServer).ContainerCreateAndExposePortsAutomatically(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotmakerDockerCommunicationGrpc.Docker/ContainerCreateAndExposePortsAutomatically",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerServer).ContainerCreateAndExposePortsAutomatically(ctx, req.(*ContainerCreateAndExposePortsAutomaticallyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Docker_ContainerCreateExposePortsAutomaticallyAndStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerCreateAndExposePortsAutomaticallyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerServer).ContainerCreateExposePortsAutomaticallyAndStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotmakerDockerCommunicationGrpc.Docker/ContainerCreateExposePortsAutomaticallyAndStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerServer).ContainerCreateExposePortsAutomaticallyAndStart(ctx, req.(*ContainerCreateAndExposePortsAutomaticallyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Docker_ContainerCreateWithoutExposePorts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerCreateWithoutExposePortsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerServer).ContainerCreateWithoutExposePorts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotmakerDockerCommunicationGrpc.Docker/ContainerCreateWithoutExposePorts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerServer).ContainerCreateWithoutExposePorts(ctx, req.(*ContainerCreateWithoutExposePortsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Docker_ContainerCreateWithoutExposePortsAndStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerCreateWithoutExposePortsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerServer).ContainerCreateWithoutExposePortsAndStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotmakerDockerCommunicationGrpc.Docker/ContainerCreateWithoutExposePortsAndStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerServer).ContainerCreateWithoutExposePortsAndStart(ctx, req.(*ContainerCreateWithoutExposePortsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Docker_ContainerFindIdByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerServer).ContainerFindIdByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotmakerDockerCommunicationGrpc.Docker/ContainerFindIdByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerServer).ContainerFindIdByName(ctx, req.(*RequestByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Docker_ContainerFindIdByNameContains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerServer).ContainerFindIdByNameContains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotmakerDockerCommunicationGrpc.Docker/ContainerFindIdByNameContains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerServer).ContainerFindIdByNameContains(ctx, req.(*RequestByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Docker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "iotmakerDockerCommunicationGrpc.Docker",
	HandlerType: (*DockerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ContainerCreate",
			Handler:    _Docker_ContainerCreate_Handler,
		},
		{
			MethodName: "ContainerCreateAndStart",
			Handler:    _Docker_ContainerCreateAndStart_Handler,
		},
		{
			MethodName: "ContainerCreateAndChangeExposedPort",
			Handler:    _Docker_ContainerCreateAndChangeExposedPort_Handler,
		},
		{
			MethodName: "ContainerCreateChangeExposedPortAndStart",
			Handler:    _Docker_ContainerCreateChangeExposedPortAndStart_Handler,
		},
		{
			MethodName: "ContainerCreateAndExposePortsAutomatically",
			Handler:    _Docker_ContainerCreateAndExposePortsAutomatically_Handler,
		},
		{
			MethodName: "ContainerCreateExposePortsAutomaticallyAndStart",
			Handler:    _Docker_ContainerCreateExposePortsAutomaticallyAndStart_Handler,
		},
		{
			MethodName: "ContainerCreateWithoutExposePorts",
			Handler:    _Docker_ContainerCreateWithoutExposePorts_Handler,
		},
		{
			MethodName: "ContainerCreateWithoutExposePortsAndStart",
			Handler:    _Docker_ContainerCreateWithoutExposePortsAndStart_Handler,
		},
		{
			MethodName: "ContainerFindIdByName",
			Handler:    _Docker_ContainerFindIdByName_Handler,
		},
		{
			MethodName: "ContainerFindIdByNameContains",
			Handler:    _Docker_ContainerFindIdByNameContains_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "containerCreate.proto",
}
